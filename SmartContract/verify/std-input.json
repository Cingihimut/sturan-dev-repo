{
    "language": "Solidity",
    "sources": {
      "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
      },
      "contracts/Crowdfunding.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.24;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\ncontract Crowdfunding {\r\n    string public name = \"Aloa Games\";\r\n    uint256 public goal = 25000 * 10 ** 18;\r\n    uint256 public constant MAX_CONTRIBUTION = 300 * 10 ** 18;\r\n\r\n    IERC20 private token;\r\n\r\n    uint256 public totalFunds;\r\n    bool public isGoalReached;\r\n    bool public isClosed;\r\n    mapping(address => uint256) public contributions;\r\n    address[] private contributorsList;\r\n\r\n    event Funded(address indexed user, uint256 amount);\r\n    event Refunded(address indexed user, uint256 amount);\r\n    event GoalReached();\r\n    event CrowdfundingClosed();\r\n\r\n    constructor(address _tokenAddress) {\r\n        token = IERC20(_tokenAddress);\r\n    }\r\n\r\n    modifier onlyWhileOpen() {\r\n        require(!isClosed, \"Crowdfunding is closed\");\r\n        _;\r\n    }\r\n\r\n    function fund(uint256 amount) external onlyWhileOpen {\r\n        require(amount > 0, \"Amount must be greater than 0\");\r\n        require(\r\n            token.balanceOf(msg.sender) >= amount,\r\n            \"Insufficient token balance\"\r\n        );\r\n        require(\r\n            amount <= MAX_CONTRIBUTION,\r\n            \"Contributor exceeds the maximum limit\"\r\n        );\r\n\r\n        if (contributions[msg.sender] == 0) {\r\n            contributorsList.push(msg.sender);\r\n        }\r\n\r\n        contributions[msg.sender] += amount;\r\n        totalFunds += amount;\r\n\r\n        // Transfer token from contributor to the contract\r\n        token.transferFrom(msg.sender, address(this), amount);\r\n        emit Funded(msg.sender, amount);\r\n\r\n        if (totalFunds >= goal && !isGoalReached) {\r\n            isGoalReached = true;\r\n            emit GoalReached();\r\n        }\r\n    }\r\n\r\n    function closeCrowdfunding() external onlyWhileOpen {\r\n        isClosed = true;\r\n        emit CrowdfundingClosed();\r\n    }\r\n\r\n    function refund() external onlyWhileOpen {\r\n        require(!isGoalReached, \"Goal has been reached\");\r\n\r\n        uint256 contribution = contributions[msg.sender];\r\n        require(\r\n            contribution > 0,\r\n            \"You have not contributed to this crowdfunding\"\r\n        );\r\n\r\n        contributions[msg.sender] = 0;\r\n        totalFunds -= contribution;\r\n\r\n        token.transfer(msg.sender, contribution);\r\n        emit Refunded(msg.sender, contribution);\r\n    }\r\n\r\n    function getDetails()\r\n        external\r\n        view\r\n        returns (string memory, uint256, uint256, bool, bool)\r\n    {\r\n        return (name, goal, totalFunds, isGoalReached, isClosed);\r\n    }\r\n\r\n    function getContributors() external view returns (address[] memory) {\r\n        address[] memory result = new address[](contributorsList.length);\r\n        uint256 index = 0;\r\n\r\n        for (uint256 i = 0; i < contributorsList.length; i++) {\r\n            if (contributions[contributorsList[i]] > 0) {\r\n                result[index] = contributorsList[i];\r\n                index++;\r\n            }\r\n        }\r\n\r\n        address[] memory trimmedResult = new address[](index);\r\n        for (uint256 i = 0; i < index; i++) {\r\n            trimmedResult[i] = result[i];\r\n        }\r\n\r\n        return trimmedResult;\r\n    }\r\n}\r\n"
      }
    },
    "settings": {
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "evmVersion": "paris",
      "outputSelection": {
        "*": {
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ],
          "": [
            "ast"
          ]
        }
      }
    }
  }