{
    "language": "Solidity",
    "sources": {
      "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
      },
      "contracts/ClaimToken.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.24;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\ncontract ClaimToken {\r\n    IERC20 public xtrToken;\r\n    uint256 public constant MAX_CLAIM_AMOUNT = 1000 * 10 ** 18;\r\n    uint256 public claimFee;\r\n    address public owner;\r\n    mapping(address => bool) public hasClaimed;\r\n    address[] public claimers;\r\n    uint256 public totalFeesCollected;\r\n\r\n    event Claim(address indexed claimer, uint256 amount, uint256 fee);\r\n    event FeeWithdrawn(address indexed owner, uint256 amount);\r\n\r\n    constructor(address _xtrTokenAddress, uint256 _claimFee) {\r\n        xtrToken = IERC20(_xtrTokenAddress);\r\n        claimFee = _claimFee;\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only owner can perform this function\");\r\n        _;\r\n    }\r\n\r\n    function claimXTR() external payable {\r\n        require(!hasClaimed[msg.sender], \"You have already claimed XTR Token\");\r\n        require(xtrToken.balanceOf(address(this)) >= MAX_CLAIM_AMOUNT, \"Insufficient XTR tokens available for claim\");\r\n        require(msg.value >= claimFee, \"Insufficient fee\");\r\n\r\n        hasClaimed[msg.sender] = true;\r\n        claimers.push(msg.sender);\r\n        totalFeesCollected += msg.value;\r\n\r\n        xtrToken.transfer(msg.sender, MAX_CLAIM_AMOUNT);\r\n\r\n        emit Claim(msg.sender, MAX_CLAIM_AMOUNT, msg.value);\r\n    }\r\n\r\n    function withdrawFees() external onlyOwner {\r\n        uint256 feeAmount = totalFeesCollected;\r\n        require(feeAmount > 0, \"No fees to withdraw\");\r\n\r\n        totalFeesCollected = 0;\r\n        (bool success, ) = owner.call{value: feeAmount}(\"\");\r\n        require(success, \"Withdrawal failed\");\r\n\r\n        emit FeeWithdrawn(owner, feeAmount);\r\n    }\r\n\r\n    function transferXTRContract(uint256 _amount) external onlyOwner {\r\n        require(_amount > 0, \"Transfer must be greater than 0\");\r\n        require(xtrToken.transferFrom(msg.sender, address(this), _amount), \"Transfer failed\");\r\n    }\r\n\r\n    receive() external payable {\r\n        totalFeesCollected += msg.value;\r\n    }\r\n}\r\n"
      }
    },
    "settings": {
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "evmVersion": "paris",
      "outputSelection": {
        "*": {
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ],
          "": [
            "ast"
          ]
        }
      }
    }
  }